package joukkuerekisteri.test;
// Generated by ComTest BEGIN
import java.util.*;
import joukkuerekisteri.*;
import java.io.File;
import static org.junit.Assert.*;
import org.junit.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.08.05 13:26:18 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class JoukkueetTest {



  // Generated by ComTest BEGIN
  /** 
   * testLisaa42 
   * @throws SailoException when error
   */
  @Test
  public void testLisaa42() throws SailoException {    // Joukkueet: 42
    Joukkueet joukkueet = new Joukkueet(); 
    Joukkue joukkue1 = new Joukkue(), joukkue2 = new Joukkue(); 
    assertEquals("From: Joukkueet line: 48", 0, joukkueet.getLkm()); 
    joukkueet.lisaa(joukkue1); assertEquals("From: Joukkueet line: 49", 1, joukkueet.getLkm()); 
    joukkueet.lisaa(joukkue2); assertEquals("From: Joukkueet line: 50", 2, joukkueet.getLkm()); 
    joukkueet.lisaa(joukkue1); assertEquals("From: Joukkueet line: 51", 3, joukkueet.getLkm()); 
    Iterator<Joukkue> it = joukkueet.iterator(); 
    assertEquals("From: Joukkueet line: 53", joukkue1, it.next()); 
    assertEquals("From: Joukkueet line: 54", joukkue2, it.next()); 
    assertEquals("From: Joukkueet line: 55", joukkue1, it.next()); 
    joukkueet.lisaa(joukkue1); assertEquals("From: Joukkueet line: 56", 4, joukkueet.getLkm()); 
    joukkueet.lisaa(joukkue1); assertEquals("From: Joukkueet line: 57", 5, joukkueet.getLkm()); 
    joukkueet.lisaa(joukkue1); assertEquals("From: Joukkueet line: 58", 6, joukkueet.getLkm()); 
    joukkueet.lisaa(joukkue1); assertEquals("From: Joukkueet line: 59", 7, joukkueet.getLkm()); 
    joukkueet.lisaa(joukkue1); assertEquals("From: Joukkueet line: 60", 8, joukkueet.getLkm()); 
    joukkueet.lisaa(joukkue1); assertEquals("From: Joukkueet line: 61", 9, joukkueet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa76 
   * @throws SailoException when error
   * @throws CloneNotSupportedException when error
   */
  @Test
  public void testKorvaaTaiLisaa76() throws SailoException,CloneNotSupportedException {    // Joukkueet: 76
    Joukkueet joukkueet = new Joukkueet(); 
    Joukkue joukkue1 = new Joukkue(), joukkue2 = new Joukkue(); 
    joukkue1.rekisteroi(); joukkue2.rekisteroi(); 
    assertEquals("From: Joukkueet line: 82", 0, joukkueet.getLkm()); 
    joukkueet.korvaaTaiLisaa(joukkue1); assertEquals("From: Joukkueet line: 83", 1, joukkueet.getLkm()); 
    joukkueet.korvaaTaiLisaa(joukkue2); assertEquals("From: Joukkueet line: 84", 2, joukkueet.getLkm()); 
    Joukkue joukkue3 = joukkue1.clone(); 
    joukkueet.korvaaTaiLisaa(joukkue3); assertEquals("From: Joukkueet line: 86", 2, joukkueet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta107 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta107() throws SailoException {    // Joukkueet: 107
    Joukkueet joukkueet = new Joukkueet(); 
    Joukkue j1 = new Joukkue(), j2 = new Joukkue(); 
    String hakemisto = "testisarja"; 
    String tiedNimi = hakemisto+"/nimet"; 
    File ftied = new File(tiedNimi+".dat"); 
    File dir = new File(hakemisto); 
    dir.mkdir(); 
    ftied.delete(); 
    try {
    joukkueet.lueTiedostosta(tiedNimi); 
    fail("Joukkueet: 119 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    joukkueet.lisaa(j1); 
    joukkueet.lisaa(j2); 
    joukkueet.tallenna(); 
    joukkueet = new Joukkueet(); 
    joukkueet.lueTiedostosta(tiedNimi); 
    Iterator<Joukkue> i = joukkueet.iterator(); 
    assertEquals("From: Joukkueet line: 126", j1, i.next()); 
    assertEquals("From: Joukkueet line: 127", j2, i.next()); 
    assertEquals("From: Joukkueet line: 128", false, i.hasNext()); 
    joukkueet.lisaa(j2); 
    joukkueet.tallenna(); 
    assertEquals("From: Joukkueet line: 131", true, ftied.delete()); 
    File fbak = new File(tiedNimi+".bak"); 
    assertEquals("From: Joukkueet line: 133", true, fbak.delete()); 
    assertEquals("From: Joukkueet line: 134", true, dir.delete()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista201 
   * @throws SailoException when error
   */
  @Test
  public void testPoista201() throws SailoException {    // Joukkueet: 201
    Joukkueet joukkueet = new Joukkueet(); 
    Joukkue joukkue1 = new Joukkue(), joukkue2 = new Joukkue(), joukkue3 = new Joukkue(); 
    joukkue1.rekisteroi(); joukkue2.rekisteroi(); joukkue3.rekisteroi(); 
    int id1 = joukkue1.getTunnusNro(); 
    joukkueet.lisaa(joukkue1); joukkueet.lisaa(joukkue2); joukkueet.lisaa(joukkue3); 
    assertEquals("From: Joukkueet line: 208", 1, joukkueet.poista(id1+1)); 
    assertEquals("From: Joukkueet line: 209", null, joukkueet.anna(id1+1)); assertEquals("From: Joukkueet line: 209", 2, joukkueet.getLkm()); 
    assertEquals("From: Joukkueet line: 210", 1, joukkueet.poista(id1)); assertEquals("From: Joukkueet line: 210", 1, joukkueet.getLkm()); 
    assertEquals("From: Joukkueet line: 211", 0, joukkueet.poista(id1+3)); assertEquals("From: Joukkueet line: 211", 1, joukkueet.getLkm()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsiId231 
   * @throws SailoException when error
   */
  @Test
  public void testEtsiId231() throws SailoException {    // Joukkueet: 231
    Joukkueet joukkueet = new Joukkueet(); 
    Joukkue j1 = new Joukkue(), j2 = new Joukkue(), j3 = new Joukkue(); 
    j1.rekisteroi(); j2.rekisteroi(); j3.rekisteroi(); 
    int id1 = j1.getTunnusNro(); 
    joukkueet.lisaa(j1); joukkueet.lisaa(j2); joukkueet.lisaa(j3); 
    assertEquals("From: Joukkueet line: 238", 1, joukkueet.etsiId(id1+1)); 
    assertEquals("From: Joukkueet line: 239", 2, joukkueet.etsiId(id1+2)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi254 
   * @throws SailoException when error
   */
  @Test
  public void testEtsi254() throws SailoException {    // Joukkueet: 254
    Joukkueet joukkueet = new Joukkueet(); 
    Joukkue j1 = new Joukkue(); j1.parse("1|FC Honkola|Äänekoski|2010|"); 
    Joukkue j2 = new Joukkue(); j2.parse("2|AC Hietama|Äänekoski|2020|"); 
    Joukkue j3 = new Joukkue(); j3.parse("3|AC Konginkangas|Äänekoski|2020|"); 
    Joukkue j4 = new Joukkue(); j4.parse("4|FC Kortepohja|Jyväskylä|2020|"); 
    Joukkue j5 = new Joukkue(); j5.parse("5|FC Keltinmäki|Jyväskylä|2010|"); 
    joukkueet.lisaa(j1); joukkueet.lisaa(j2); joukkueet.lisaa(j3); joukkueet.lisaa(j4); joukkueet.lisaa(j5); 
    List<Joukkue> loytyneet; 
    loytyneet = (List<Joukkue>)joukkueet.etsi("*FC*",0); 
    assertEquals("From: Joukkueet line: 265", 3, loytyneet.size()); 
    assertEquals("From: Joukkueet line: 266", true, loytyneet.get(0) == j1); 
    assertEquals("From: Joukkueet line: 267", true, loytyneet.get(2) == j4); 
    assertEquals("From: Joukkueet line: 268", true, loytyneet.get(1) == j5); 
    loytyneet = (List<Joukkue>)joukkueet.etsi("*2020*",2); 
    assertEquals("From: Joukkueet line: 271", 3, loytyneet.size()); 
    assertEquals("From: Joukkueet line: 272", true, loytyneet.get(0) == j2); 
    assertEquals("From: Joukkueet line: 273", true, loytyneet.get(1) == j3); 
    assertEquals("From: Joukkueet line: 274", true, loytyneet.get(2) == j4); 
    loytyneet = (List<Joukkue>)joukkueet.etsi("*Jyväskylä*",1); 
    assertEquals("From: Joukkueet line: 277", 2, loytyneet.size()); 
    assertEquals("From: Joukkueet line: 278", true, loytyneet.get(0) == j4); 
    assertEquals("From: Joukkueet line: 279", true, loytyneet.get(1) == j5); 
    loytyneet = (List<Joukkue>)joukkueet.etsi(null,-1); 
    assertEquals("From: Joukkueet line: 282", 5, loytyneet.size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testJoukkueetIterator369 
   * @throws SailoException when error
   */
  @Test
  public void testJoukkueetIterator369() throws SailoException {    // Joukkueet: 369
    Joukkueet joukkueet = new Joukkueet(); 
    Joukkue j1 = new Joukkue(), j2 = new Joukkue(); 
    j1.rekisteroi(); j2.rekisteroi(); 
    joukkueet.lisaa(j1); 
    joukkueet.lisaa(j2); 
    joukkueet.lisaa(j1); 
    StringBuffer ids = new StringBuffer(30); 
    for (Joukkue joukkue:joukkueet)
    ids.append(" "+joukkue.getTunnusNro()); 
    String tulos = " " + j1.getTunnusNro() + " " + j2.getTunnusNro() + " " + j1.getTunnusNro(); 
    assertEquals("From: Joukkueet line: 388", tulos, ids.toString()); 
    ids = new StringBuffer(30); 
    for (Iterator<Joukkue>  i=joukkueet.iterator(); i.hasNext(); ) {
    Joukkue joukkue = i.next(); 
    ids.append(" "+joukkue.getTunnusNro()); 
    }
    assertEquals("From: Joukkueet line: 396", tulos, ids.toString()); 
    Iterator<Joukkue>  i=joukkueet.iterator(); 
    assertEquals("From: Joukkueet line: 399", true, i.next() == j1); 
    assertEquals("From: Joukkueet line: 400", true, i.next() == j2); 
    assertEquals("From: Joukkueet line: 401", true, i.next() == j1); 
    try {
    i.next(); 
    fail("Joukkueet: 403 Did not throw NoSuchElementException");
    } catch(NoSuchElementException _e_){ _e_.getMessage(); }
  } // Generated by ComTest END
}