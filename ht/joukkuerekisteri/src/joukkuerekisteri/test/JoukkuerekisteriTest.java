package joukkuerekisteri.test;
// Generated by ComTest BEGIN
import joukkuerekisteri.SailoException;
import java.util.*;
import java.io.*;
import static org.junit.Assert.*;
import org.junit.*;
import joukkuerekisteri.*;
// Generated by ComTest END

/**
 * Test class made by ComTest
 * @version 2020.08.05 13:26:24 // Generated by ComTest
 *
 */
@SuppressWarnings({ "all" })
public class JoukkuerekisteriTest {


  // Generated by ComTest BEGIN  // Joukkuerekisteri: 19
   private Joukkuerekisteri joukkuerekisteri; 
   private Joukkue j1; 
   private Joukkue j2; 
   private int jid1; 
   private int jid2; 
   private Pelaaja p1; 
   private Pelaaja p2; 
   private Pelaaja p3; 
   private Pelaaja p4; 
   private Pelaaja p5; 


   public void alustaJoukkuerekisteri() {
     joukkuerekisteri = new Joukkuerekisteri(); 
     j1 = new Joukkue(); j1.rekisteroi(); 
     j2 = new Joukkue(); j2.rekisteroi(); 
     jid1 = j1.getTunnusNro(); 
     jid2 = j2.getTunnusNro(); 
     p1 = new Pelaaja(); p1.rekisteroi(); p1.setJoukkueenro(jid2); 
     p2 = new Pelaaja(); p2.rekisteroi(); p2.setJoukkueenro(jid1); 
     p3 = new Pelaaja(); p3.rekisteroi(); p3.setJoukkueenro(jid2); 
     p4 = new Pelaaja(); p4.rekisteroi(); p4.setJoukkueenro(jid1); 
     p5 = new Pelaaja(); p5.rekisteroi(); p5.setJoukkueenro(jid2); 
     try {
     joukkuerekisteri.lisaa(j1); 
     joukkuerekisteri.lisaa(j2); 
     joukkuerekisteri.lisaa(p1); 
     joukkuerekisteri.lisaa(p2); 
     joukkuerekisteri.lisaa(p3); 
     joukkuerekisteri.lisaa(p4); 
     joukkuerekisteri.lisaa(p5); 
     } catch ( Exception e) {
        System.err.println(e.getMessage()); 
     }
   }
  // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGetPaino86 
   * @throws Exception when error
   */
  @Test
  public void testGetPaino86() throws Exception {    // Joukkuerekisteri: 86
    alustaJoukkuerekisteri(); 
    p1.setPaino("100.00"); 
    p2.setPaino("95.00"); 
    p3.setPaino("80.25"); 
    p4.setPaino("80.50"); 
    p5.setPaino("50.75"); 
    assertEquals("From: Joukkuerekisteri line: 94", "81,30", joukkuerekisteri.getPaino()); 
    p1.setPaino("70.40"); 
    assertEquals("From: Joukkuerekisteri line: 96", "75,38", joukkuerekisteri.getPaino()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGetPituus114 
   * @throws Exception when error
   */
  @Test
  public void testGetPituus114() throws Exception {    // Joukkuerekisteri: 114
    alustaJoukkuerekisteri(); 
    p1.setPituus("180.50"); 
    p2.setPituus("195.00"); 
    p3.setPituus("183.25"); 
    p4.setPituus("170.50"); 
    p5.setPituus("175.75"); 
    assertEquals("From: Joukkuerekisteri line: 122", "181,00", joukkuerekisteri.getPituus()); 
    p1.setPituus("182.00"); 
    assertEquals("From: Joukkuerekisteri line: 124", "181,30", joukkuerekisteri.getPituus()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGetIka142 
   * @throws Exception when error
   */
  @Test
  public void testGetIka142() throws Exception {    // Joukkuerekisteri: 142
    alustaJoukkuerekisteri(); 
    p1.setSyntyma("01:01:2000"); 
    p2.setSyntyma("01:01:1995"); 
    p3.setSyntyma("01:01:1990"); 
    p4.setSyntyma("01:01:2005"); 
    p5.setSyntyma("01:01:1990"); 
    assertEquals("From: Joukkuerekisteri line: 150", "24,00", joukkuerekisteri.getIka()); 
    p1.setSyntyma("01:01:1994"); 
    assertEquals("From: Joukkuerekisteri line: 152", "25,20", joukkuerekisteri.getIka()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGetPelipaikkaMaara171 
   * @throws Exception when error
   */
  @Test
  public void testGetPelipaikkaMaara171() throws Exception {    // Joukkuerekisteri: 171
    alustaJoukkuerekisteri(); 
    assertEquals("From: Joukkuerekisteri line: 174", "0.0", joukkuerekisteri.getPelipaikkaMaara("Hyökkääjä")); 
    p2.setPelipaikka("Hyökkääjä"); 
    p4.setPelipaikka("Hyökkääjä"); 
    assertEquals("From: Joukkuerekisteri line: 177", "2.0", joukkuerekisteri.getPelipaikkaMaara("Hyökkääjä")); 
    p2.setPelipaikka("Puolustaja"); 
    assertEquals("From: Joukkuerekisteri line: 179", "1.0", joukkuerekisteri.getPelipaikkaMaara("Hyökkääjä")); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKPituus198 
   * @throws Exception when error
   */
  @Test
  public void testKPituus198() throws Exception {    // Joukkuerekisteri: 198
    alustaJoukkuerekisteri(); 
    p2.setPituus("180.00"); 
    p4.setPituus("190.00"); 
    assertEquals("From: Joukkuerekisteri line: 203", "185,00", joukkuerekisteri.KPituus(j1)); 
    p2.setPituus("175.00"); 
    assertEquals("From: Joukkuerekisteri line: 205", "182,50", joukkuerekisteri.KPituus(j1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKPaino224 
   * @throws Exception when error
   */
  @Test
  public void testKPaino224() throws Exception {    // Joukkuerekisteri: 224
    alustaJoukkuerekisteri(); 
    p2.setPaino("80.00"); 
    p4.setPaino("100.00"); 
    assertEquals("From: Joukkuerekisteri line: 229", "90,00", joukkuerekisteri.KPaino(j1)); 
    p2.setPaino("95.00"); 
    assertEquals("From: Joukkuerekisteri line: 231", "97,50", joukkuerekisteri.KPaino(j1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKIka250 
   * @throws Exception when error
   */
  @Test
  public void testKIka250() throws Exception {    // Joukkuerekisteri: 250
    alustaJoukkuerekisteri(); 
    p2.setSyntyma("01:01:2000"); 
    p4.setSyntyma("01:01:1990"); 
    assertEquals("From: Joukkuerekisteri line: 255", "25,00", joukkuerekisteri.KIka(j1)); 
    p2.setSyntyma("01:01:1994"); 
    assertEquals("From: Joukkuerekisteri line: 257", "28,00", joukkuerekisteri.KIka(j1)); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoista276 
   * @throws Exception when error
   */
  @Test
  public void testPoista276() throws Exception {    // Joukkuerekisteri: 276
    alustaJoukkuerekisteri(); 
    assertEquals("From: Joukkuerekisteri line: 279", 2, joukkuerekisteri.getJoukkueita()); 
    assertEquals("From: Joukkuerekisteri line: 280", 2, joukkuerekisteri.annaPelaajat(j1).size()); 
    assertEquals("From: Joukkuerekisteri line: 281", 1, joukkuerekisteri.poista(j1)); 
    assertEquals("From: Joukkuerekisteri line: 282", 1, joukkuerekisteri.getJoukkueita()); 
    assertEquals("From: Joukkuerekisteri line: 283", 0, joukkuerekisteri.annaPelaajat(j1).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testPoistaPelaaja299 
   * @throws Exception when error
   */
  @Test
  public void testPoistaPelaaja299() throws Exception {    // Joukkuerekisteri: 299
    alustaJoukkuerekisteri(); 
    assertEquals("From: Joukkuerekisteri line: 302", 2, joukkuerekisteri.annaPelaajat(j1).size()); 
    assertEquals("From: Joukkuerekisteri line: 303", 1, joukkuerekisteri.poistaPelaaja(p2)); 
    assertEquals("From: Joukkuerekisteri line: 304", 1, joukkuerekisteri.annaPelaajat(j1).size()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa319 
   * @throws Exception when error
   */
  @Test
  public void testLisaa319() throws Exception {    // Joukkuerekisteri: 319
    alustaJoukkuerekisteri(); 
    assertEquals("From: Joukkuerekisteri line: 322", 2, joukkuerekisteri.getJoukkueita()); 
    Joukkue j3 = new Joukkue(); j3.rekisteroi(); 
    joukkuerekisteri.lisaa(j3); 
    assertEquals("From: Joukkuerekisteri line: 325", 3, joukkuerekisteri.getJoukkueita()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLisaa338 
   * @throws Exception when error
   */
  @Test
  public void testLisaa338() throws Exception {    // Joukkuerekisteri: 338
    alustaJoukkuerekisteri(); 
    assertEquals("From: Joukkuerekisteri line: 341", 5, joukkuerekisteri.getPelaajia()); 
    Pelaaja p6 = new Pelaaja(); p6.rekisteroi(); 
    joukkuerekisteri.lisaa(p6); 
    assertEquals("From: Joukkuerekisteri line: 344", 6, joukkuerekisteri.getPelaajia()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa359 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa359() throws SailoException {    // Joukkuerekisteri: 359
    alustaJoukkuerekisteri(); 
    assertEquals("From: Joukkuerekisteri line: 362", 2, joukkuerekisteri.getJoukkueita()); 
    joukkuerekisteri.korvaaTaiLisaa(j2); 
    assertEquals("From: Joukkuerekisteri line: 364", 2, joukkuerekisteri.getJoukkueita()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testKorvaaTaiLisaa379 
   * @throws SailoException when error
   */
  @Test
  public void testKorvaaTaiLisaa379() throws SailoException {    // Joukkuerekisteri: 379
    alustaJoukkuerekisteri(); 
    assertEquals("From: Joukkuerekisteri line: 382", 5, joukkuerekisteri.getPelaajia()); 
    joukkuerekisteri.korvaaTaiLisaa(p2); 
    assertEquals("From: Joukkuerekisteri line: 384", 5, joukkuerekisteri.getPelaajia()); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testAnnaPelaajat407 
   * @throws SailoException when error
   */
  @Test
  public void testAnnaPelaajat407() throws SailoException {    // Joukkuerekisteri: 407
    alustaJoukkuerekisteri(); 
    Joukkue j3 = new Joukkue(); 
    j3.rekisteroi(); 
    joukkuerekisteri.lisaa(j3); 
    List<Pelaaja> loytyneet; 
    loytyneet = joukkuerekisteri.annaPelaajat(j3); 
    assertEquals("From: Joukkuerekisteri line: 418", 0, loytyneet.size()); 
    loytyneet = joukkuerekisteri.annaPelaajat(j1); 
    assertEquals("From: Joukkuerekisteri line: 420", 2, loytyneet.size()); 
    assertEquals("From: Joukkuerekisteri line: 421", true, loytyneet.get(0) == p2); 
    assertEquals("From: Joukkuerekisteri line: 422", true, loytyneet.get(1) == p4); 
    loytyneet = joukkuerekisteri.annaPelaajat(j2); 
    assertEquals("From: Joukkuerekisteri line: 424", 3, loytyneet.size()); 
    assertEquals("From: Joukkuerekisteri line: 425", true, loytyneet.get(0) == p1); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testGetListaPelaajista437 
   * @throws SailoException when error
   */
  @Test
  public void testGetListaPelaajista437() throws SailoException {    // Joukkuerekisteri: 437
    alustaJoukkuerekisteri(); 
    List<Pelaaja> loytyneet = joukkuerekisteri.getListaPelaajista(); 
    assertEquals("From: Joukkuerekisteri line: 443", 5, loytyneet.size()); 
    assertEquals("From: Joukkuerekisteri line: 444", true, loytyneet.get(0) == p1); 
    assertEquals("From: Joukkuerekisteri line: 445", true, loytyneet.get(1) == p2); 
    assertEquals("From: Joukkuerekisteri line: 446", true, loytyneet.get(2) == p3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testEtsi460 
   * @throws CloneNotSupportedException when error
   * @throws SailoException when error
   */
  @Test
  public void testEtsi460() throws CloneNotSupportedException, SailoException {    // Joukkuerekisteri: 460
    alustaJoukkuerekisteri(); 
    Joukkue j3 = new Joukkue(); j3.rekisteroi(); 
    j3.setNimi("FC Honkola"); 
    joukkuerekisteri.lisaa(j3); 
    Collection<Joukkue> loytyneet = joukkuerekisteri.etsi("*FC*",0); 
    assertEquals("From: Joukkuerekisteri line: 467", 1, loytyneet.size()); 
    Iterator<Joukkue> it = loytyneet.iterator(); 
    assertEquals("From: Joukkuerekisteri line: 469", true, it.next() == j3); 
  } // Generated by ComTest END


  // Generated by ComTest BEGIN
  /** 
   * testLueTiedostosta482 
   * @throws SailoException when error
   */
  @Test
  public void testLueTiedostosta482() throws SailoException {    // Joukkuerekisteri: 482
    String hakemisto = "testisarja"; 
    File dir = new File(hakemisto); 
    File ftied  = new File(hakemisto+"/joukkueet.dat"); 
    File fhtied = new File(hakemisto+"/pelaajat.dat"); 
    dir.mkdir(); 
    ftied.delete(); 
    fhtied.delete(); 
    joukkuerekisteri = new Joukkuerekisteri(); 
    try {
    joukkuerekisteri.lueTiedostosta(hakemisto); 
    fail("Joukkuerekisteri: 496 Did not throw SailoException");
    } catch(SailoException _e_){ _e_.getMessage(); }
    alustaJoukkuerekisteri(); 
    joukkuerekisteri.setTiedosto(hakemisto); 
    joukkuerekisteri.tallenna(); 
    joukkuerekisteri = new Joukkuerekisteri(); 
    joukkuerekisteri.lueTiedostosta(hakemisto); 
    Collection<Joukkue> kaikki = joukkuerekisteri.etsi("",-1); 
    Iterator<Joukkue> it = kaikki.iterator(); 
    assertEquals("From: Joukkuerekisteri line: 504", j1, it.next()); 
    assertEquals("From: Joukkuerekisteri line: 505", j2, it.next()); 
    assertEquals("From: Joukkuerekisteri line: 506", false, it.hasNext()); 
    List<Pelaaja> loytyneet = joukkuerekisteri.annaPelaajat(j1); 
    Iterator<Pelaaja> ip = loytyneet.iterator(); 
    assertEquals("From: Joukkuerekisteri line: 509", p2, ip.next()); 
    assertEquals("From: Joukkuerekisteri line: 510", p4, ip.next()); 
    assertEquals("From: Joukkuerekisteri line: 511", false, ip.hasNext()); 
    loytyneet = joukkuerekisteri.annaPelaajat(j2); 
    ip = loytyneet.iterator(); 
    assertEquals("From: Joukkuerekisteri line: 514", p1, ip.next()); 
    assertEquals("From: Joukkuerekisteri line: 515", p3, ip.next()); 
    assertEquals("From: Joukkuerekisteri line: 516", p5, ip.next()); 
    assertEquals("From: Joukkuerekisteri line: 517", false, ip.hasNext()); 
    joukkuerekisteri.lisaa(j2); 
    joukkuerekisteri.lisaa(p5); 
    joukkuerekisteri.tallenna(); 
    assertEquals("From: Joukkuerekisteri line: 521", true, ftied.delete()); 
    assertEquals("From: Joukkuerekisteri line: 522", true, fhtied.delete()); 
    File fbak = new File(hakemisto+"/joukkueet.bak"); 
    File fhbak = new File(hakemisto+"/pelaajat.bak"); 
    assertEquals("From: Joukkuerekisteri line: 525", true, fbak.delete()); 
    assertEquals("From: Joukkuerekisteri line: 526", true, fhbak.delete()); 
    assertEquals("From: Joukkuerekisteri line: 527", true, dir.delete()); 
  } // Generated by ComTest END
}